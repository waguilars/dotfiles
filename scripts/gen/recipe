#!/usr/bin/env bash
##? Generate a recipe for a package
##?
##?
##? Usage:
##?   recipe [-h | --help]
##?   recipe [-c | --core] [--author <author>] [--email <email>] [-o | --open] <recipe_name> [<recipe_icon>] [<recipe_description>...]
##?
##? Options:
##?   -h --help          Show this help
##?   -v --version       Show the program version
##?   -c --core          Create the recipe in the valid core folder for recipes in SLOTH_PATH
##?   --author <author>  Provide who is the author, if none the default git author will
##?                      be used
##?   --email <email>    Provide author email, if none the default git author email will
##?                      be used
##?   -o --open          Open editor by using env var \$EDITOR to edit or view the script if not defined just use "cat"
##?
##? Author:
##?   Gabriel Trabanco Llano <gtrabanco@users.noreply.github.com>
##?
#? v1.0.0

source "$DOTLY_PATH/scripts/core/_main.sh"
source "$DOTFILES_PATH/scripts/core/src/_main.sh"

if [[ -z "$recipe_name" ]]; then
  recipe_name="$(output::question "What is the name of the package manager?")"

  [[ -z "$recipe_name" ]] && output::error "A name for the package manager is mandatory" &&
    exit 1
fi

if [[ $recipe_name == "registry" ]]; then
  output::error "The name \`registry\` is reserved for the registry package manager (recipes). This is because it is a core functionality."
  exit 1
fi

recipe_icon="${recipe_icon:-"$(str::to_upper "$recipe_name")"}"
editor="${EDITOR:-cat}"
author="${author:-$(git config --global --get user.name)}"
email="${email:-$(git config --global --get user.email)}"

mkdir -p "$DOTFILES_RECIPES_PATH"

if ${core:-false}; then
  output::error "WARNING! You will create the package manager in .Sloth core path"
  ! output::yesno "Are you sure you want to continue" && exit 1

  [[ ! -d "${SLOTH_PATH:-${DOTLY_PATH:-}}/scripts/package/src/recipes/" ]] &&
    output::error "The package manager path for core .Sloth could not be found" &&
    exit 1

  recipe_full_path="${SLOTH_PATH:-${DOTLY_PATH:-}}/scripts/package/src/recipes/${recipe_name}.sh"
else
  recipe_full_path="${DOTFILES_RECIPES_PATH}/${recipe_name}.sh"
fi
recipe_template="$(dot::get_script_path)/src/templates/recipe"


if [[ -z "$author" ]]; then
  author="$(output::question "Write the author name")"
  exit 1
fi

if [[ -z "$email" ]]; then
  author="$(output::question "Write the author email")"
  exit 1
fi


if [[ -r "$recipe_full_path" ]]; then
  output::error "The package manager \`${recipe_name}\` already exists"

  if output::yesno "Do you want to overwrite it?"; then
    rm -f "$recipe_full_path"
  else
    exit 1
  fi
fi

output::answer "Creating package manager \`${recipe_name}\`"
cp -f "$recipe_template" "$recipe_full_path"

output::answer "Editing package manager \`${recipe_name}\`"
templating::replace "$recipe_full_path" --author-name="$author" --author-email="$email" --recipe-name="$recipe_name" --recipe-icon="$recipe_icon" > /dev/null

output::solution "All was done sucessfully"
output::empty_line

show_path="${recipe_full_path//$DOTFILES_PATH/\$DOTFILES_PATH}"
show_sloth_path="${SLOTH_PATH//$DOTFILES_PATH/\$DOTFILES_PATH}"
show_path="${show_path//$show_sloth_path/\$SLOTH_PATH}"
output::write "You can access and edit your new package manager implemetation by executing:"
output::write "    \"\$EDITOR\" \"${show_path}\""
output::empty_line

if ${open:-false}; then
  output::write "Opening with \$EDITOR..."
  output::empty_line
  "$editor" "$recipe_full_path"
fi